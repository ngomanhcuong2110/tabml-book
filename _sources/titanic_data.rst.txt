
Làm sạch dữ liệu titanic
========================

.. code:: python

    %%capture
    !rm -rf ./nb_data/titanic; mkdir -p ./nb_data/titanic
    !pip install kaggle;
    !kaggle competitions download -c titanic -p ./nb_data/titanic;


Unzip ``titanic.zip``

.. code:: python

    !cd nb_data/titanic; unzip titanic.zip; cd ../../


.. parsed-literal::
    :class: output

    Archive:  titanic.zip
      inflating: gender_submission.csv   
      inflating: test.csv                
      inflating: train.csv               


Sau khi giải nén, thư mục ``./nb_data/titanic`` có ba file ``.csv`` như
trên. Trong ba file này, ``train.csv`` là dữ liệu dược dùng để huấn
luyện, ``test.csv`` là dữ liệu cần dự đoán, và ``gender_submision.csv``
là file nộp kết quả mẫu.

.. code:: python

    import pandas as pd
    
    df_train = pd.read_csv("./nb_data/titanic/train.csv")
    df_train.info()


.. parsed-literal::
    :class: output

    <class 'pandas.core.frame.DataFrame'>
    RangeIndex: 891 entries, 0 to 890
    Data columns (total 12 columns):
     #   Column       Non-Null Count  Dtype  
    ---  ------       --------------  -----  
     0   PassengerId  891 non-null    int64  
     1   Survived     891 non-null    int64  
     2   Pclass       891 non-null    int64  
     3   Name         891 non-null    object 
     4   Sex          891 non-null    object 
     5   Age          714 non-null    float64
     6   SibSp        891 non-null    int64  
     7   Parch        891 non-null    int64  
     8   Ticket       891 non-null    object 
     9   Fare         891 non-null    float64
     10  Cabin        204 non-null    object 
     11  Embarked     889 non-null    object 
    dtypes: float64(2), int64(5), object(5)
    memory usage: 83.7+ KB


Phương thức ``.info()`` trả về thông tin sơ bộ của ``df_train``. Thông
tin cụ thể về từng trường dữ liệu có thể tìm thấy tại trang `dữ liệu
cuộc thi <https://www.kaggle.com/c/titanic/data>`__. Từ kết quả bên trên
ta thấy được:

1. Có 891 điểm dữ liệu (891 hàng).
2. Các trường ``Age, Cabin, Embarked`` có ít hơn 891 giá trị
   ``Non-Null``. Điều này có nghĩa là các trường này có dữ liệu bị
   khuyết.
3. Các trường ``Name, Sex, Ticket, Cabin, Embarked`` có kiểu dữ liệu
   ``Dtype`` là ``object``, tức các trường này được lưu ở dạng
   ``string``. Các trường còn lại có giá trị là số nguyên (``int64``)
   hoặc số thực (``float64``). Chú ý rằng chúng ta không nên ngầm hiểu
   các trường này thực sự có ý nghĩa là số, ở đây vì chúng ta không chỉ
   rõ kiểu dữ liệu khi đọc file ``.csv`` bằng ``pd.read_csv`` nên
   ``pandas`` tự suy ra kiểu dữ liệu. Trong bộ dữ liệu này mỗi
   ``PasengerId`` là một mã hành khách, có thể là một giá trị bất kỳ
   không lặp lại. Chúng ta cần xác định rõ kiểu của từng trường dữ liệu,
   mô hình ML thường có những cách xử lý khác nhau giữa kiểu dữ liệu
   dạng số và dạng hạng mục.

Tiếp theo, để có cái nhìn nhanh về các trường dữ liệu dạng số, thuộc
tính ``describe()`` được sử dụng:

.. code:: python

    df_train.describe()




.. raw:: html

    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }
    
        .dataframe tbody tr th {
            vertical-align: top;
        }
    
        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>PassengerId</th>
          <th>Survived</th>
          <th>Pclass</th>
          <th>Age</th>
          <th>SibSp</th>
          <th>Parch</th>
          <th>Fare</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>count</th>
          <td>891.000000</td>
          <td>891.000000</td>
          <td>891.000000</td>
          <td>714.000000</td>
          <td>891.000000</td>
          <td>891.000000</td>
          <td>891.000000</td>
        </tr>
        <tr>
          <th>mean</th>
          <td>446.000000</td>
          <td>0.383838</td>
          <td>2.308642</td>
          <td>29.699118</td>
          <td>0.523008</td>
          <td>0.381594</td>
          <td>32.204208</td>
        </tr>
        <tr>
          <th>std</th>
          <td>257.353842</td>
          <td>0.486592</td>
          <td>0.836071</td>
          <td>14.526497</td>
          <td>1.102743</td>
          <td>0.806057</td>
          <td>49.693429</td>
        </tr>
        <tr>
          <th>min</th>
          <td>1.000000</td>
          <td>0.000000</td>
          <td>1.000000</td>
          <td>0.420000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
        </tr>
        <tr>
          <th>25%</th>
          <td>223.500000</td>
          <td>0.000000</td>
          <td>2.000000</td>
          <td>20.125000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>7.910400</td>
        </tr>
        <tr>
          <th>50%</th>
          <td>446.000000</td>
          <td>0.000000</td>
          <td>3.000000</td>
          <td>28.000000</td>
          <td>0.000000</td>
          <td>0.000000</td>
          <td>14.454200</td>
        </tr>
        <tr>
          <th>75%</th>
          <td>668.500000</td>
          <td>1.000000</td>
          <td>3.000000</td>
          <td>38.000000</td>
          <td>1.000000</td>
          <td>0.000000</td>
          <td>31.000000</td>
        </tr>
        <tr>
          <th>max</th>
          <td>891.000000</td>
          <td>1.000000</td>
          <td>3.000000</td>
          <td>80.000000</td>
          <td>8.000000</td>
          <td>6.000000</td>
          <td>512.329200</td>
        </tr>
      </tbody>
    </table>
    </div>



Kết quả trả về giúp chúng ta có cái nhìn khái quát về phân phối của các
trường dữ liệu dạng số. Một vài quan sát:

1. Cột ``Survived`` là cột chứa nhãn của mỗi hàng. Giá trị nhỏ nhất bằng
   0 và giá trị lớn nhất bằng 1, cùng với việc kiểu dữ liệu là
   ``int64``, ta có thể nói rằng kiểu dữ liệu của trường này là nhị phân
   [^1]. Ở đây, giá trị ``1`` mang nghĩa là sống sót và ``0`` mang nghĩa
   ngược lại. Giá trị trung bình ``mean = 0.3838`` cũng giúp chỉ ra rằng
   khoảng 38.4% dữ liệu thuộc class ``1`` so với khoảng 61.6% dữ liệu
   thuộc class ``0``. Dữ liệu có bị lệch nhưng không quá nghiêm trọng.

2. Cột

[^1] Khi không xác định rõ kiểu dữ liệu, ``pandas`` tự chuyển kiểu nhị
phân về ``int64``, số thực về ``float64``. Với các tập dữ liệu lớn, việc
không xác định rõ kiểu khi đọc dữ liệu có thể dẫn tới tình trạng tràn bộ
nhớ.
